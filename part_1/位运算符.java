/* 位运算符 */
/*
	<<  左移  二进制 在一定范围内，每向左移一位就相当于在原数*2,
				     左移两位就相当于在原数*（2^2）。
					 
					 
	>>	右移   二进制 在一定范围内，每向右移一位就相当于在原数/2,
				      右移两位就相当于在原数/（2^2）。
					  被右移后二进制最高位是0，右移后，空缺位补0，最高位是1，空缺位补1
	
	最高效的计算2*8？ 解：2<<3,或8<<1;			  
					  
	>>>  无符号右移   二进制  空缺位都用0补
	&    与
	|    或
	^    异或
	~    取反
*/
class 位运算符{
	public static void main(String[] args){
		//每向左移一位就相当于在原数*2,
		//左移两位就相当于在原数*（2^2）,
		int i = 21;
		System.out.println("i << 2: "+(i<<2)); //左移一位是42，两位是84
		System.out.println("i << 3: "+(i<<3)); 
		
		System.out.println("i >> 2: "+(i>>2)); //
		
		int m = 12; //1100
		int n = 5;  //0101
		//System.out.println("m&n :"+(m&n)); //12和5二进制下，每一位都是1取1,0100(4)
		//System.out.println("m|n :"+(m|n)); //12和5二进制下，有一位是1取1,1101(13)
		//System.out.println("m^n :"+(m^n)); //12和5二进制下，对应位不同取1,1001(9)
		
		//练习交换两个变量
		int num1 = 10;
		int num2 = 20;
		
		num1 = num1 << 1;  //左移一位相当于乘以2
		num2 = num2 >> 1;  //右移一位相当于除以2
		System.out.println("num1 = :" + num1 +" num2 = :" + num2);
		
	}	
}